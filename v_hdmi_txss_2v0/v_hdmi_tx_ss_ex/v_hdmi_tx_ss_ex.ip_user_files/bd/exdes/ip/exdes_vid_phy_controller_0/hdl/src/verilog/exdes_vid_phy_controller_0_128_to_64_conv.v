///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 3.5
//  \   \         Application : 7 Series FPGAs Transceivers  Wizard
//  /   /         Filename : gtwizard_0_gt_usrclk_source.v
// /___/   /\      
// \   \  /  \ 
//  \___\/\___\ 
//
//
// Module gtwizard_0_GT_USRCLK_SOURCE (for use with GTs)
// Generated by Xilinx 7 Series FPGAs Transceivers Wizard
// 
// 
// (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 

`timescale 1ns/1ps
(* DowngradeIPIdentifiedWarnings="yes" *)
module exdes_vid_phy_controller_0_128_to_64_conv
#(
    parameter   DEPTH     = 8,
    parameter   PTR_WIDTH = 3,
    parameter   DWIDTH    = 128
)
(
 input  wire              pll_locked,
 input  wire              wr_clk, // divide by 128
 input  wire [DWIDTH-1:0] data_in0,
 input  wire [DWIDTH-1:0] data_in1,
 input  wire [DWIDTH-1:0] data_in2,
 input  wire [DWIDTH-1:0] data_in3,
 input  wire              rd_clk, //divide by 64
 output reg  [DWIDTH/2-1:0] data_out0,
 output reg  [DWIDTH/2-1:0] data_out1,
 output reg  [DWIDTH/2-1:0] data_out2,
 output reg  [DWIDTH/2-1:0] data_out3
);

reg  [PTR_WIDTH-1:0] wr_ptr;
reg  [PTR_WIDTH-1:0] rd_ptr;
reg  [DWIDTH/2-1:0]    mem0 [0:DEPTH-1];
reg  [DWIDTH/2-1:0]    mem1 [0:DEPTH-1];
reg  [DWIDTH/2-1:0]    mem2 [0:DEPTH-1];
reg  [DWIDTH/2-1:0]    mem3 [0:DEPTH-1];
reg  [31:0]          init;
wire [31:0]          rd_ptr_init;
reg  [DWIDTH-1:0]    data_in0_128;
reg  [DWIDTH-1:0]    data_in1_128;
reg  [DWIDTH-1:0]    data_in2_128;
reg  [DWIDTH-1:0]    data_in3_128;
reg  alt_data;


always @ ( posedge wr_clk or negedge pll_locked )
begin
   if ( !pll_locked )
   begin
      wr_ptr             <= { PTR_WIDTH { 1'b 0 } };
      for ( init = 0; init < DEPTH; init = init + 1'b 1 )
      begin
         mem0[init]       <= { DWIDTH { 1'b 0 } };
         mem1[init]       <= { DWIDTH { 1'b 0 } };
         mem2[init]       <= { DWIDTH { 1'b 0 } };
         mem3[init]       <= { DWIDTH { 1'b 0 } };
      end
   end
   else
   begin
         wr_ptr             <= wr_ptr + 2'b10;
         mem0[wr_ptr]        <= data_in0[DWIDTH/2-1:0];
         mem0[wr_ptr+1]      <= data_in0[DWIDTH-1:DWIDTH/2];

         mem1[wr_ptr]        <= data_in1[DWIDTH/2-1:0];
         mem1[wr_ptr+1]      <= data_in1[DWIDTH-1:DWIDTH/2];

         mem2[wr_ptr]        <= data_in2[DWIDTH/2-1:0];
         mem2[wr_ptr+1]      <= data_in2[DWIDTH-1:DWIDTH/2];

         mem3[wr_ptr]        <= data_in3[DWIDTH/2-1:0];
         mem3[wr_ptr+1]      <= data_in3[DWIDTH-1:DWIDTH/2];
   end
end

assign rd_ptr_init = ( DEPTH >> 1 ); // reset to middle of fifo

always @ ( posedge rd_clk or negedge pll_locked )
begin
   if ( !pll_locked )
   begin
      rd_ptr    <= rd_ptr_init[PTR_WIDTH-1:0];
      data_out0  <= { DWIDTH { 1'b 0 } };
      data_out1  <= { DWIDTH { 1'b 0 } };
      data_out2  <= { DWIDTH { 1'b 0 } };
      data_out3  <= { DWIDTH { 1'b 0 } };
   end
   else
   begin
      rd_ptr    <= rd_ptr + 1'b 1;
      data_out0  <= mem0[rd_ptr];
      data_out1  <= mem1[rd_ptr];
      data_out2  <= mem2[rd_ptr];
      data_out3  <= mem3[rd_ptr];
   end
end

endmodule

