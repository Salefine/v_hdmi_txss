// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exdes_v_tpg_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_936_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sof,
        empty,
        div283_cast,
        fid_in_load,
        fid,
        fid_ap_vld,
        ovrlayYUV_dout,
        ovrlayYUV_num_data_valid,
        ovrlayYUV_fifo_cap,
        ovrlayYUV_empty_n,
        ovrlayYUV_read,
        icmp_ln975_1,
        icmp_ln975,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        field_id_load,
        sub_cast,
        counter_loc_1_out_i,
        counter_loc_1_out_o,
        counter_loc_1_out_o_ap_vld,
        p_phi_out,
        p_phi_out_ap_vld,
        counter,
        counter_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] sof;
input  [0:0] empty;
input  [11:0] div283_cast;
input  [0:0] fid_in_load;
output  [0:0] fid;
output   fid_ap_vld;
input  [47:0] ovrlayYUV_dout;
input  [4:0] ovrlayYUV_num_data_valid;
input  [4:0] ovrlayYUV_fifo_cap;
input   ovrlayYUV_empty_n;
output   ovrlayYUV_read;
input  [0:0] icmp_ln975_1;
input  [0:0] icmp_ln975;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] field_id_load;
input  [11:0] sub_cast;
input  [15:0] counter_loc_1_out_i;
output  [15:0] counter_loc_1_out_o;
output   counter_loc_1_out_o_ap_vld;
output  [0:0] p_phi_out;
output   p_phi_out_ap_vld;
output  [15:0] counter;
output   counter_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] fid;
reg fid_ap_vld;
reg ovrlayYUV_read;
reg m_axis_video_TVALID;
reg[15:0] counter_loc_1_out_o;
reg counter_loc_1_out_o_ap_vld;
reg p_phi_out_ap_vld;
reg counter_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ovrlayYUV_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln936_reg_584;
reg    m_axis_video_TDATA_blk_n;
reg   [0:0] tmp_user_V_reg_232;
reg   [0:0] p_phi_reg_244;
wire   [15:0] field_id_load_read_read_fu_146_p2;
wire  signed [12:0] sub_cast_cast_fu_275_p1;
reg  signed [12:0] sub_cast_cast_reg_579;
wire   [0:0] icmp_ln936_fu_291_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_last_V_fu_302_p2;
reg   [0:0] tmp_last_V_reg_588;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [0:0] ap_phi_mux_tmp_user_V_phi_fu_236_p4;
reg   [0:0] ap_phi_mux_empty_144_phi_fu_260_p10;
wire   [0:0] ap_phi_reg_pp0_iter0_empty_144_reg_254;
reg   [0:0] ap_phi_reg_pp0_iter1_empty_144_reg_254;
wire   [0:0] fid_toggle_fu_338_p1;
wire   [0:0] fid_toggle_1_fu_515_p2;
wire   [15:0] add_ln960_fu_311_p2;
wire    ap_CS_fsm_state4;
reg   [11:0] j_fu_136;
wire   [11:0] j_2_fu_296_p2;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] zext_ln936_fu_287_p1;
wire   [7:0] pix_444_V_fu_344_p1;
wire   [7:0] pix_rgb_V_4_fu_368_p4;
wire   [8:0] p_Result_1_fu_406_p3;
wire   [8:0] p_Result_s_fu_398_p3;
wire   [8:0] axi_data_V_fu_414_p3;
wire   [7:0] pix_rgb_V_5_fu_378_p4;
wire   [7:0] pix_422_V_fu_388_p4;
wire   [7:0] select_ln975_1_fu_432_p3;
wire   [7:0] pix_rgb_V_fu_348_p4;
wire   [7:0] select_ln975_3_fu_446_p3;
wire   [7:0] pix_rgb_V_6_fu_358_p4;
wire   [7:0] select_ln975_5_fu_460_p3;
wire   [7:0] select_ln975_7_fu_474_p3;
wire   [7:0] select_ln975_8_fu_481_p3;
wire   [7:0] select_ln975_6_fu_467_p3;
wire   [7:0] select_ln975_4_fu_453_p3;
wire   [7:0] select_ln975_2_fu_439_p3;
wire   [7:0] select_ln975_fu_425_p3;
wire  signed [47:0] sext_ln880_fu_421_p1;
wire   [39:0] tmp_s_fu_488_p6;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_165;
reg    ap_condition_142;
reg    ap_condition_389;
reg    ap_condition_392;
reg    ap_condition_395;
reg    ap_condition_398;
reg    ap_condition_401;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_142)) begin
        if ((1'b1 == ap_condition_165)) begin
            ap_phi_reg_pp0_iter1_empty_144_reg_254 <= fid_in_load;
        end else if (((icmp_ln936_fu_291_p2 == 1'd0) & (field_id_load_read_read_fu_146_p2 == 16'd2))) begin
            ap_phi_reg_pp0_iter1_empty_144_reg_254 <= 1'd1;
        end else if (((icmp_ln936_fu_291_p2 == 1'd0) & (field_id_load_read_read_fu_146_p2 == 16'd0))) begin
            ap_phi_reg_pp0_iter1_empty_144_reg_254 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_144_reg_254 <= ap_phi_reg_pp0_iter0_empty_144_reg_254;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_136 <= 12'd0;
    end else if (((icmp_ln936_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_fu_136 <= j_2_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_phi_reg_244 <= empty;
    end else if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_phi_reg_244 <= ap_phi_mux_empty_144_phi_fu_260_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_reg_232 <= sof;
    end else if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_reg_232 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln936_reg_584 <= icmp_ln936_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sub_cast_cast_reg_579 <= sub_cast_cast_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln936_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_588 <= tmp_last_V_fu_302_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln936_fu_291_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln936_reg_584 == 1'd0)) begin
        if ((field_id_load_read_read_fu_146_p2 == 16'd3)) begin
            ap_phi_mux_empty_144_phi_fu_260_p10 = fid_toggle_1_fu_515_p2;
        end else if ((field_id_load_read_read_fu_146_p2 == 16'd1)) begin
            ap_phi_mux_empty_144_phi_fu_260_p10 = fid_toggle_fu_338_p1;
        end else begin
            ap_phi_mux_empty_144_phi_fu_260_p10 = ap_phi_reg_pp0_iter1_empty_144_reg_254;
        end
    end else begin
        ap_phi_mux_empty_144_phi_fu_260_p10 = ap_phi_reg_pp0_iter1_empty_144_reg_254;
    end
end

always @ (*) begin
    if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tmp_user_V_phi_fu_236_p4 = 1'd0;
    end else begin
        ap_phi_mux_tmp_user_V_phi_fu_236_p4 = tmp_user_V_reg_232;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln936_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_user_V_phi_fu_236_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        counter_ap_vld = 1'b1;
    end else begin
        counter_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln936_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_user_V_phi_fu_236_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        counter_loc_1_out_o = add_ln960_fu_311_p2;
    end else begin
        counter_loc_1_out_o = counter_loc_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln936_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_user_V_phi_fu_236_p4 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        counter_loc_1_out_o_ap_vld = 1'b1;
    end else begin
        counter_loc_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_401)) begin
            fid = fid_toggle_fu_338_p1;
        end else if ((1'b1 == ap_condition_398)) begin
            fid = fid_toggle_1_fu_515_p2;
        end else if ((1'b1 == ap_condition_395)) begin
            fid = fid_in_load;
        end else if ((1'b1 == ap_condition_392)) begin
            fid = 1'd0;
        end else if ((1'b1 == ap_condition_389)) begin
            fid = 1'd1;
        end else begin
            fid = 'bx;
        end
    end else begin
        fid = 'bx;
    end
end

always @ (*) begin
    if (((~(field_id_load_read_read_fu_146_p2 == 16'd3) & ~(field_id_load_read_read_fu_146_p2 == 16'd2) & ~(field_id_load_read_read_fu_146_p2 == 16'd1) & ~(field_id_load_read_read_fu_146_p2 == 16'd0) & (icmp_ln936_fu_291_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((field_id_load_read_read_fu_146_p2 == 16'd3) & (icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((field_id_load_read_read_fu_146_p2 == 16'd1) & (icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln936_fu_291_p2 == 1'd0) & (field_id_load_read_read_fu_146_p2 == 16'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln936_fu_291_p2 == 1'd0) & (field_id_load_read_read_fu_146_p2 == 16'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        fid_ap_vld = 1'b1;
    end else begin
        fid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ovrlayYUV_blk_n = ovrlayYUV_empty_n;
    end else begin
        ovrlayYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln936_reg_584 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ovrlayYUV_read = 1'b1;
    end else begin
        ovrlayYUV_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_phi_out_ap_vld = 1'b1;
    end else begin
        p_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln936_fu_291_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln936_fu_291_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln960_fu_311_p2 = (counter_loc_1_out_i + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln936_reg_584 == 1'd0) & (ovrlayYUV_empty_n == 1'b0)) | ((icmp_ln936_reg_584 == 1'd0) & (m_axis_video_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln936_reg_584 == 1'd0) & (ovrlayYUV_empty_n == 1'b0)) | ((icmp_ln936_reg_584 == 1'd0) & (m_axis_video_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln936_reg_584 == 1'd0) & (ovrlayYUV_empty_n == 1'b0)) | ((icmp_ln936_reg_584 == 1'd0) & (m_axis_video_TREADY == 1'b0))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln936_reg_584 == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln936_reg_584 == 1'd0) & (ovrlayYUV_empty_n == 1'b0)) | ((icmp_ln936_reg_584 == 1'd0) & (m_axis_video_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_142 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_165 = (~(field_id_load_read_read_fu_146_p2 == 16'd3) & ~(field_id_load_read_read_fu_146_p2 == 16'd2) & ~(field_id_load_read_read_fu_146_p2 == 16'd1) & ~(field_id_load_read_read_fu_146_p2 == 16'd0) & (icmp_ln936_fu_291_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_389 = ((icmp_ln936_fu_291_p2 == 1'd0) & (field_id_load_read_read_fu_146_p2 == 16'd2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_392 = ((icmp_ln936_fu_291_p2 == 1'd0) & (field_id_load_read_read_fu_146_p2 == 16'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_395 = (~(field_id_load_read_read_fu_146_p2 == 16'd3) & ~(field_id_load_read_read_fu_146_p2 == 16'd2) & ~(field_id_load_read_read_fu_146_p2 == 16'd1) & ~(field_id_load_read_read_fu_146_p2 == 16'd0) & (icmp_ln936_fu_291_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_398 = ((field_id_load_read_read_fu_146_p2 == 16'd3) & (icmp_ln936_reg_584 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_401 = ((field_id_load_read_read_fu_146_p2 == 16'd1) & (icmp_ln936_reg_584 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_144_reg_254 = 'bx;

assign axi_data_V_fu_414_p3 = ((icmp_ln975_1[0:0] == 1'b1) ? p_Result_1_fu_406_p3 : p_Result_s_fu_398_p3);

assign counter = (counter_loc_1_out_i + 16'd1);

assign fid_toggle_1_fu_515_p2 = (fid_toggle_fu_338_p1 ^ 1'd1);

assign fid_toggle_fu_338_p1 = counter_loc_1_out_i[0:0];

assign field_id_load_read_read_fu_146_p2 = field_id_load;

assign icmp_ln936_fu_291_p2 = ((j_fu_136 == div283_cast) ? 1'b1 : 1'b0);

assign j_2_fu_296_p2 = (j_fu_136 + 12'd1);

assign m_axis_video_TDATA = {{tmp_s_fu_488_p6}, {sext_ln880_fu_421_p1[7:0]}};

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 6'd63;

assign m_axis_video_TLAST = tmp_last_V_reg_588;

assign m_axis_video_TSTRB = 6'd0;

assign m_axis_video_TUSER = tmp_user_V_reg_232;

assign p_Result_1_fu_406_p3 = {{1'd1}, {pix_rgb_V_4_fu_368_p4}};

assign p_Result_s_fu_398_p3 = {{1'd1}, {pix_444_V_fu_344_p1}};

assign p_phi_out = p_phi_reg_244;

assign pix_422_V_fu_388_p4 = {{ovrlayYUV_dout[31:24]}};

assign pix_444_V_fu_344_p1 = ovrlayYUV_dout[7:0];

assign pix_rgb_V_4_fu_368_p4 = {{ovrlayYUV_dout[15:8]}};

assign pix_rgb_V_5_fu_378_p4 = {{ovrlayYUV_dout[23:16]}};

assign pix_rgb_V_6_fu_358_p4 = {{ovrlayYUV_dout[47:40]}};

assign pix_rgb_V_fu_348_p4 = {{ovrlayYUV_dout[39:32]}};

assign select_ln975_1_fu_432_p3 = ((icmp_ln975[0:0] == 1'b1) ? pix_rgb_V_5_fu_378_p4 : pix_422_V_fu_388_p4);

assign select_ln975_2_fu_439_p3 = ((icmp_ln975_1[0:0] == 1'b1) ? pix_444_V_fu_344_p1 : select_ln975_1_fu_432_p3);

assign select_ln975_3_fu_446_p3 = ((icmp_ln975[0:0] == 1'b1) ? pix_422_V_fu_388_p4 : pix_rgb_V_fu_348_p4);

assign select_ln975_4_fu_453_p3 = ((icmp_ln975_1[0:0] == 1'b1) ? pix_rgb_V_fu_348_p4 : select_ln975_3_fu_446_p3);

assign select_ln975_5_fu_460_p3 = ((icmp_ln975[0:0] == 1'b1) ? pix_rgb_V_fu_348_p4 : pix_rgb_V_6_fu_358_p4);

assign select_ln975_6_fu_467_p3 = ((icmp_ln975_1[0:0] == 1'b1) ? pix_rgb_V_6_fu_358_p4 : select_ln975_5_fu_460_p3);

assign select_ln975_7_fu_474_p3 = ((icmp_ln975[0:0] == 1'b1) ? pix_rgb_V_6_fu_358_p4 : pix_rgb_V_5_fu_378_p4);

assign select_ln975_8_fu_481_p3 = ((icmp_ln975_1[0:0] == 1'b1) ? pix_422_V_fu_388_p4 : select_ln975_7_fu_474_p3);

assign select_ln975_fu_425_p3 = ((icmp_ln975_1[0:0] == 1'b1) ? pix_rgb_V_5_fu_378_p4 : pix_rgb_V_4_fu_368_p4);

assign sext_ln880_fu_421_p1 = $signed(axi_data_V_fu_414_p3);

assign sub_cast_cast_fu_275_p1 = $signed(sub_cast);

assign tmp_last_V_fu_302_p2 = ((zext_ln936_fu_287_p1 == sub_cast_cast_reg_579) ? 1'b1 : 1'b0);

assign tmp_s_fu_488_p6 = {{{{{select_ln975_8_fu_481_p3}, {select_ln975_6_fu_467_p3}}, {select_ln975_4_fu_453_p3}}, {select_ln975_2_fu_439_p3}}, {select_ln975_fu_425_p3}};

assign zext_ln936_fu_287_p1 = j_fu_136;

endmodule //exdes_v_tpg_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_936_2
